
Screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002098  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002220  08002220  00003220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002250  08002250  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002250  08002250  00004028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002250  08002250  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002250  08002250  00003250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002254  08002254  00003254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08002258  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004028  2**0
                  CONTENTS
 10 .bss          00000020  20000028  20000028  00004028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  00004028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c7d  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000eda  00000000  00000000  00007cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  00008bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ef  00000000  00000000  00008fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018eeb  00000000  00000000  000092b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000055b2  00000000  00000000  000221a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009239a  00000000  00000000  00027754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b9aee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ea4  00000000  00000000  000b9b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000ba9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002208 	.word	0x08002208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08002208 	.word	0x08002208

080001c8 <delay_us>:

int Dpins[2] = {DIO1_Pin, DIO2_Pin};
int Cpins[2] = {Clk1_Pin, Clk2_Pin};

void delay_us (int time)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	for (int i=0; i<time; i++)
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e00c      	b.n	80001f0 <delay_us+0x28>
	{
		for (int j=0; j<1; j++)
 80001d6:	2300      	movs	r3, #0
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	e003      	b.n	80001e4 <delay_us+0x1c>
		{
			__asm__("nop");
 80001dc:	bf00      	nop
		for (int j=0; j<1; j++)
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	3301      	adds	r3, #1
 80001e2:	60bb      	str	r3, [r7, #8]
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	ddf8      	ble.n	80001dc <delay_us+0x14>
	for (int i=0; i<time; i++)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fa      	ldr	r2, [r7, #12]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	dbee      	blt.n	80001d6 <delay_us+0xe>
		}
	}
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <data>:

void data(int set, int pin)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, Dpins[pin], set);
 8000212:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <data+0x28>)
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021a:	b29b      	uxth	r3, r3
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	b2d2      	uxtb	r2, r2
 8000220:	4619      	mov	r1, r3
 8000222:	4804      	ldr	r0, [pc, #16]	@ (8000234 <data+0x2c>)
 8000224:	f000 fddc 	bl	8000de0 <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	2000000c 	.word	0x2000000c
 8000234:	48000400 	.word	0x48000400

08000238 <clock>:

void clock(int set, int pin)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, Cpins[pin], set);
 8000242:	4a07      	ldr	r2, [pc, #28]	@ (8000260 <clock+0x28>)
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024a:	b29b      	uxth	r3, r3
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	4619      	mov	r1, r3
 8000252:	4804      	ldr	r0, [pc, #16]	@ (8000264 <clock+0x2c>)
 8000254:	f000 fdc4 	bl	8000de0 <HAL_GPIO_WritePin>
}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000014 	.word	0x20000014
 8000264:	48000400 	.word	0x48000400

08000268 <start>:

void start (int pin)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	clock(1, pin);
 8000270:	6879      	ldr	r1, [r7, #4]
 8000272:	2001      	movs	r0, #1
 8000274:	f7ff ffe0 	bl	8000238 <clock>
	data(1, pin);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	2001      	movs	r0, #1
 800027c:	f7ff ffc4 	bl	8000208 <data>
	delay_us (2);
 8000280:	2002      	movs	r0, #2
 8000282:	f7ff ffa1 	bl	80001c8 <delay_us>
	data(0, pin);
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	2000      	movs	r0, #0
 800028a:	f7ff ffbd 	bl	8000208 <data>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <stop>:

void stop (int pin)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
	clock(0, pin);
 800029e:	6879      	ldr	r1, [r7, #4]
 80002a0:	2000      	movs	r0, #0
 80002a2:	f7ff ffc9 	bl	8000238 <clock>
	delay_us (2);
 80002a6:	2002      	movs	r0, #2
 80002a8:	f7ff ff8e 	bl	80001c8 <delay_us>
	data(0, pin);
 80002ac:	6879      	ldr	r1, [r7, #4]
 80002ae:	2000      	movs	r0, #0
 80002b0:	f7ff ffaa 	bl	8000208 <data>
	delay_us (2);
 80002b4:	2002      	movs	r0, #2
 80002b6:	f7ff ff87 	bl	80001c8 <delay_us>
	clock(1, pin);
 80002ba:	6879      	ldr	r1, [r7, #4]
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ffbb 	bl	8000238 <clock>
	delay_us (2);
 80002c2:	2002      	movs	r0, #2
 80002c4:	f7ff ff80 	bl	80001c8 <delay_us>
	data(1, pin);
 80002c8:	6879      	ldr	r1, [r7, #4]
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ff9c 	bl	8000208 <data>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <ack>:

void ack(int pin)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	clock(0, pin);
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	2000      	movs	r0, #0
 80002e4:	f7ff ffa8 	bl	8000238 <clock>
	delay_us(5);
 80002e8:	2005      	movs	r0, #5
 80002ea:	f7ff ff6d 	bl	80001c8 <delay_us>
	clock(1, pin);
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	2001      	movs	r0, #1
 80002f2:	f7ff ffa1 	bl	8000238 <clock>
	delay_us(2);
 80002f6:	2002      	movs	r0, #2
 80002f8:	f7ff ff66 	bl	80001c8 <delay_us>
	clock(0, pin);
 80002fc:	6879      	ldr	r1, [r7, #4]
 80002fe:	2000      	movs	r0, #0
 8000300:	f7ff ff9a 	bl	8000238 <clock>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <sendByte>:

void sendByte(uint8_t d, int pin)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	e01a      	b.n	8000354 <sendByte+0x48>
	{
		clock(0, pin);
 800031e:	6839      	ldr	r1, [r7, #0]
 8000320:	2000      	movs	r0, #0
 8000322:	f7ff ff89 	bl	8000238 <clock>
		data(d%2, pin);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	6839      	ldr	r1, [r7, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff6a 	bl	8000208 <data>
		delay_us(3);
 8000334:	2003      	movs	r0, #3
 8000336:	f7ff ff47 	bl	80001c8 <delay_us>
		d = d >> 1;
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	085b      	lsrs	r3, r3, #1
 800033e:	71fb      	strb	r3, [r7, #7]
		clock(1, pin);
 8000340:	6839      	ldr	r1, [r7, #0]
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ff78 	bl	8000238 <clock>
		delay_us(3);
 8000348:	2003      	movs	r0, #3
 800034a:	f7ff ff3d 	bl	80001c8 <delay_us>
	for(int i = 0; i < 8; i++)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3301      	adds	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b07      	cmp	r3, #7
 8000358:	dde1      	ble.n	800031e <sendByte+0x12>
	}
	ack(pin);
 800035a:	6838      	ldr	r0, [r7, #0]
 800035c:	f7ff ffbc 	bl	80002d8 <ack>
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <brightness>:

void brightness(int pin)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	start(pin);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ff79 	bl	8000268 <start>
	sendByte(0x8A, pin);
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	208a      	movs	r0, #138	@ 0x8a
 800037a:	f7ff ffc7 	bl	800030c <sendByte>
	stop(pin);
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff89 	bl	8000296 <stop>
}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <sendData>:

void sendData(int index, uint8_t* d, int size, int pin)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	603b      	str	r3, [r7, #0]
	start(pin);
 800039a:	6838      	ldr	r0, [r7, #0]
 800039c:	f7ff ff64 	bl	8000268 <start>
	sendByte(0x40, pin);
 80003a0:	6839      	ldr	r1, [r7, #0]
 80003a2:	2040      	movs	r0, #64	@ 0x40
 80003a4:	f7ff ffb2 	bl	800030c <sendByte>
	stop(pin);
 80003a8:	6838      	ldr	r0, [r7, #0]
 80003aa:	f7ff ff74 	bl	8000296 <stop>

	start(pin);
 80003ae:	6838      	ldr	r0, [r7, #0]
 80003b0:	f7ff ff5a 	bl	8000268 <start>
	sendByte(192 + index, pin);
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	3b40      	subs	r3, #64	@ 0x40
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	6839      	ldr	r1, [r7, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ffa4 	bl	800030c <sendByte>
	for(int i = 0; i < size; i++) sendByte(d[i], pin);
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	e00a      	b.n	80003e0 <sendData+0x54>
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	4413      	add	r3, r2
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	6839      	ldr	r1, [r7, #0]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff99 	bl	800030c <sendByte>
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	3301      	adds	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	697a      	ldr	r2, [r7, #20]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dbf0      	blt.n	80003ca <sendData+0x3e>
	stop(pin);
 80003e8:	6838      	ldr	r0, [r7, #0]
 80003ea:	f7ff ff54 	bl	8000296 <stop>
	brightness(pin);
 80003ee:	6838      	ldr	r0, [r7, #0]
 80003f0:	f7ff ffba 	bl	8000368 <brightness>
}
 80003f4:	bf00      	nop
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <sendNumber>:

void sendNumber(int index, int rIndex, int n, int pin, int size, int colon)
{
 80003fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000400:	b089      	sub	sp, #36	@ 0x24
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	466b      	mov	r3, sp
 800040e:	461e      	mov	r6, r3
	if(size == 0) for(int i = n; i > 0; i/=10) size++;
 8000410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000412:	2b00      	cmp	r3, #0
 8000414:	d110      	bne.n	8000438 <sendNumber+0x3c>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	61fb      	str	r3, [r7, #28]
 800041a:	e00a      	b.n	8000432 <sendNumber+0x36>
 800041c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800041e:	3301      	adds	r3, #1
 8000420:	643b      	str	r3, [r7, #64]	@ 0x40
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	4a3e      	ldr	r2, [pc, #248]	@ (8000520 <sendNumber+0x124>)
 8000426:	fb82 1203 	smull	r1, r2, r2, r3
 800042a:	1092      	asrs	r2, r2, #2
 800042c:	17db      	asrs	r3, r3, #31
 800042e:	1ad3      	subs	r3, r2, r3
 8000430:	61fb      	str	r3, [r7, #28]
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf1      	bgt.n	800041c <sendNumber+0x20>

	uint8_t data[size];
 8000438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800043a:	1e4b      	subs	r3, r1, #1
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	460a      	mov	r2, r1
 8000440:	2300      	movs	r3, #0
 8000442:	4690      	mov	r8, r2
 8000444:	4699      	mov	r9, r3
 8000446:	f04f 0200 	mov.w	r2, #0
 800044a:	f04f 0300 	mov.w	r3, #0
 800044e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800045a:	460a      	mov	r2, r1
 800045c:	2300      	movs	r3, #0
 800045e:	4614      	mov	r4, r2
 8000460:	461d      	mov	r5, r3
 8000462:	f04f 0200 	mov.w	r2, #0
 8000466:	f04f 0300 	mov.w	r3, #0
 800046a:	00eb      	lsls	r3, r5, #3
 800046c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000470:	00e2      	lsls	r2, r4, #3
 8000472:	460b      	mov	r3, r1
 8000474:	3307      	adds	r3, #7
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	ebad 0d03 	sub.w	sp, sp, r3
 800047e:	466b      	mov	r3, sp
 8000480:	3300      	adds	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
	for(int i = size - 1; i >= 0; i--)
 8000484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000486:	3b01      	subs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
 800048a:	e032      	b.n	80004f2 <sendNumber+0xf6>
	{
		data[i] = segments[n%10];
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <sendNumber+0x124>)
 8000490:	fb83 2301 	smull	r2, r3, r3, r1
 8000494:	109a      	asrs	r2, r3, #2
 8000496:	17cb      	asrs	r3, r1, #31
 8000498:	1ad2      	subs	r2, r2, r3
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	1aca      	subs	r2, r1, r3
 80004a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000524 <sendNumber+0x128>)
 80004a6:	5c99      	ldrb	r1, [r3, r2]
 80004a8:	693a      	ldr	r2, [r7, #16]
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	4413      	add	r3, r2
 80004ae:	460a      	mov	r2, r1
 80004b0:	701a      	strb	r2, [r3, #0]
		n/=10;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000520 <sendNumber+0x124>)
 80004b6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ba:	1092      	asrs	r2, r2, #2
 80004bc:	17db      	asrs	r3, r3, #31
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	607b      	str	r3, [r7, #4]
		if(colon != 0 && data[i] < 128) data[i] += 128;
 80004c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d011      	beq.n	80004ec <sendNumber+0xf0>
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	db0a      	blt.n	80004ec <sendNumber+0xf0>
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3b80      	subs	r3, #128	@ 0x80
 80004e0:	b2d9      	uxtb	r1, r3
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	4413      	add	r3, r2
 80004e8:	460a      	mov	r2, r1
 80004ea:	701a      	strb	r2, [r3, #0]
	for(int i = size - 1; i >= 0; i--)
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dac9      	bge.n	800048c <sendNumber+0x90>
	}

	if(rIndex != 0) index -= size - 1;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d004      	beq.n	8000508 <sendNumber+0x10c>
 80004fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000500:	3b01      	subs	r3, #1
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	60fb      	str	r3, [r7, #12]

	sendData(index, data, size, pin);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800050c:	6939      	ldr	r1, [r7, #16]
 800050e:	68f8      	ldr	r0, [r7, #12]
 8000510:	f7ff ff3c 	bl	800038c <sendData>
 8000514:	46b5      	mov	sp, r6
}
 8000516:	bf00      	nop
 8000518:	3724      	adds	r7, #36	@ 0x24
 800051a:	46bd      	mov	sp, r7
 800051c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000520:	66666667 	.word	0x66666667
 8000524:	20000000 	.word	0x20000000

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 f975 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f871 	bl	8000618 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  delay_us (2);
 8000536:	2002      	movs	r0, #2
 8000538:	f7ff fe46 	bl	80001c8 <delay_us>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8a8 	bl	8000690 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //All code copied mostly from 12*16
  uint8_t num = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
  uint8_t data[4] = {0, 0, 0, 0};
 8000544:	2300      	movs	r3, #0
 8000546:	603b      	str	r3, [r7, #0]
  int dir = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
  int i = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sendNumber(2, 0, (i/1000)%60, 0, 2, 0);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a2e      	ldr	r2, [pc, #184]	@ (800060c <main+0xe4>)
 8000554:	fb82 1203 	smull	r1, r2, r2, r3
 8000558:	1192      	asrs	r2, r2, #6
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <main+0xe8>)
 8000560:	fb83 1302 	smull	r1, r3, r3, r2
 8000564:	4413      	add	r3, r2
 8000566:	1159      	asrs	r1, r3, #5
 8000568:	17d3      	asrs	r3, r2, #31
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	460b      	mov	r3, r1
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	1ad1      	subs	r1, r2, r3
 8000576:	2300      	movs	r3, #0
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2302      	movs	r3, #2
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	460a      	mov	r2, r1
 8000582:	2100      	movs	r1, #0
 8000584:	2002      	movs	r0, #2
 8000586:	f7ff ff39 	bl	80003fc <sendNumber>
	  sendNumber(0, 0, i/60000, 0, 2, 1);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <main+0xec>)
 800058e:	fb82 1203 	smull	r1, r2, r2, r3
 8000592:	1392      	asrs	r2, r2, #14
 8000594:	17db      	asrs	r3, r3, #31
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	2100      	movs	r1, #0
 80005a4:	2000      	movs	r0, #0
 80005a6:	f7ff ff29 	bl	80003fc <sendNumber>
	  i += 150;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3396      	adds	r3, #150	@ 0x96
 80005ae:	607b      	str	r3, [r7, #4]
	  HAL_Delay(75);
 80005b0:	204b      	movs	r0, #75	@ 0x4b
 80005b2:	f000 f999 	bl	80008e8 <HAL_Delay>
	  sendData(0, data, 4, 1);
 80005b6:	4639      	mov	r1, r7
 80005b8:	2301      	movs	r3, #1
 80005ba:	2204      	movs	r2, #4
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff fee5 	bl	800038c <sendData>
	  HAL_Delay(75);
 80005c2:	204b      	movs	r0, #75	@ 0x4b
 80005c4:	f000 f990 	bl	80008e8 <HAL_Delay>
	  data[0] = data[1];
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	703b      	strb	r3, [r7, #0]
	  data[1] = data[2];
 80005cc:	78bb      	ldrb	r3, [r7, #2]
 80005ce:	707b      	strb	r3, [r7, #1]
	  data[2] = data[3];
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	70bb      	strb	r3, [r7, #2]
	  data[3] = num;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	70fb      	strb	r3, [r7, #3]

	  if(dir > 0)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	dd0c      	ble.n	80005f8 <main+0xd0>
	  {
		  num = num << 1;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
		  num++;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	3301      	adds	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
		  if(num == 0xFF) dir = -1;
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2bff      	cmp	r3, #255	@ 0xff
 80005ee:	d1af      	bne.n	8000550 <main+0x28>
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	e7ab      	b.n	8000550 <main+0x28>
	  }
	  else
	  {
		  num = num << 1;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
		  if(num == 0) dir = 1;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1a5      	bne.n	8000550 <main+0x28>
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
	  sendNumber(2, 0, (i/1000)%60, 0, 2, 0);
 8000608:	e7a2      	b.n	8000550 <main+0x28>
 800060a:	bf00      	nop
 800060c:	10624dd3 	.word	0x10624dd3
 8000610:	88888889 	.word	0x88888889
 8000614:	45e7b273 	.word	0x45e7b273

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	@ 0x40
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2228      	movs	r2, #40	@ 0x28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fdc2 	bl	80021b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2301      	movs	r3, #1
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2310      	movs	r3, #16
 8000644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000646:	2300      	movs	r3, #0
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fbde 	bl	8000e10 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800065a:	f000 f849 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fbd8 	bl	8001e2c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000682:	f000 f835 	bl	80006f0 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	@ 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_GPIO_Init+0x58>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <MX_GPIO_Init+0x58>)
 80006aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006ae:	6153      	str	r3, [r2, #20]
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_GPIO_Init+0x58>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Clk2_Pin|DIO2_Pin|Clk1_Pin|DIO1_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	21f0      	movs	r1, #240	@ 0xf0
 80006c0:	480a      	ldr	r0, [pc, #40]	@ (80006ec <MX_GPIO_Init+0x5c>)
 80006c2:	f000 fb8d 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Clk2_Pin DIO2_Pin Clk1_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = Clk2_Pin|DIO2_Pin|Clk1_Pin|DIO1_Pin;
 80006c6:	23f0      	movs	r3, #240	@ 0xf0
 80006c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_GPIO_Init+0x5c>)
 80006dc:	f000 fa0e 	bl	8000afc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000400 	.word	0x48000400

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <Error_Handler+0x8>

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <HAL_MspInit+0x44>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_MspInit+0x44>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_MspInit+0x44>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f885 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <SystemInit+0x20>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <SystemInit+0x20>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000800 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff ffea 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	@ (8000808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000814 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f001 fce3 	bl	80021c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fa:	f7ff fe95 	bl	8000528 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000800:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800080c:	08002258 	.word	0x08002258
  ldr r2, =_sbss
 8000810:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000814:	20000048 	.word	0x20000048

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	@ (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f931 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff ff60 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f93b 	bl	8000ae2 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 f911 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	@ (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000001c 	.word	0x2000001c
 80008a0:	20000024 	.word	0x20000024
 80008a4:	20000020 	.word	0x20000020

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_IncTick+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_IncTick+0x24>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_IncTick+0x24>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000024 	.word	0x20000024
 80008cc:	20000044 	.word	0x20000044

080008d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000044 	.word	0x20000044

080008e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff ffee 	bl	80008d0 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d005      	beq.n	800090e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <HAL_Delay+0x44>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800090e:	bf00      	nop
 8000910:	f7ff ffde 	bl	80008d0 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d8f7      	bhi.n	8000910 <HAL_Delay+0x28>
  {
  }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000024 	.word	0x20000024

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	@ (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	@ 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8e 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff47 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff5c 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ff8e 	bl	80009e8 <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffb0 	bl	8000a50 <SysTick_Config>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e14e      	b.n	8000daa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8140 	beq.w	8000da4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d005      	beq.n	8000b3c <HAL_GPIO_Init+0x40>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d130      	bne.n	8000b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 0201 	and.w	r2, r3, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d017      	beq.n	8000bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d123      	bne.n	8000c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0203 	and.w	r2, r3, #3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 809a 	beq.w	8000da4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <HAL_GPIO_Init+0x2cc>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a54      	ldr	r2, [pc, #336]	@ (8000dc8 <HAL_GPIO_Init+0x2cc>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b52      	ldr	r3, [pc, #328]	@ (8000dc8 <HAL_GPIO_Init+0x2cc>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c88:	4a50      	ldr	r2, [pc, #320]	@ (8000dcc <HAL_GPIO_Init+0x2d0>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cb2:	d013      	beq.n	8000cdc <HAL_GPIO_Init+0x1e0>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a46      	ldr	r2, [pc, #280]	@ (8000dd0 <HAL_GPIO_Init+0x2d4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d00d      	beq.n	8000cd8 <HAL_GPIO_Init+0x1dc>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a45      	ldr	r2, [pc, #276]	@ (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <HAL_GPIO_Init+0x1d8>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a44      	ldr	r2, [pc, #272]	@ (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <HAL_GPIO_Init+0x1d4>
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x1e2>
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	e004      	b.n	8000cde <HAL_GPIO_Init+0x1e2>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x1e2>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <HAL_GPIO_Init+0x1e2>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	f002 0203 	and.w	r2, r2, #3
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cee:	4937      	ldr	r1, [pc, #220]	@ (8000dcc <HAL_GPIO_Init+0x2d0>)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfc:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d20:	4a2e      	ldr	r2, [pc, #184]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4a:	4a24      	ldr	r2, [pc, #144]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d74:	4a19      	ldr	r2, [pc, #100]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa22 f303 	lsr.w	r3, r2, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f47f aea9 	bne.w	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df6:	887a      	ldrh	r2, [r7, #2]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e20:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f000 bff4 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 816d 	beq.w	8001126 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e4c:	4bb4      	ldr	r3, [pc, #720]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d00c      	beq.n	8000e72 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e58:	4bb1      	ldr	r3, [pc, #708]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d157      	bne.n	8000f14 <HAL_RCC_OscConfig+0x104>
 8000e64:	4bae      	ldr	r3, [pc, #696]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e70:	d150      	bne.n	8000f14 <HAL_RCC_OscConfig+0x104>
 8000e72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e76:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e92:	d802      	bhi.n	8000e9a <HAL_RCC_OscConfig+0x8a>
 8000e94:	4ba2      	ldr	r3, [pc, #648]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0xb6>
 8000e9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e9e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000ea6:	fa93 f3a3 	rbit	r3, r3
 8000eaa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000eae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000eb6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000ec2:	4b97      	ldr	r3, [pc, #604]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eca:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000ece:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000ed2:	fa92 f2a2 	rbit	r2, r2
 8000ed6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000eda:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	f042 0220 	orr.w	r2, r2, #32
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f002 021f 	and.w	r2, r2, #31
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8114 	beq.w	8001124 <HAL_RCC_OscConfig+0x314>
 8000efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 810b 	bne.w	8001124 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f000 bf85 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f24:	d106      	bne.n	8000f34 <HAL_RCC_OscConfig+0x124>
 8000f26:	4b7e      	ldr	r3, [pc, #504]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e036      	b.n	8000fa2 <HAL_RCC_OscConfig+0x192>
 8000f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x14e>
 8000f44:	4b76      	ldr	r3, [pc, #472]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a75      	ldr	r2, [pc, #468]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b73      	ldr	r3, [pc, #460]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a72      	ldr	r2, [pc, #456]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e021      	b.n	8000fa2 <HAL_RCC_OscConfig+0x192>
 8000f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f6e:	d10c      	bne.n	8000f8a <HAL_RCC_OscConfig+0x17a>
 8000f70:	4b6b      	ldr	r3, [pc, #428]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a6a      	ldr	r2, [pc, #424]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b68      	ldr	r3, [pc, #416]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a67      	ldr	r2, [pc, #412]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e00b      	b.n	8000fa2 <HAL_RCC_OscConfig+0x192>
 8000f8a:	4b65      	ldr	r3, [pc, #404]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a64      	ldr	r2, [pc, #400]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b62      	ldr	r3, [pc, #392]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a61      	ldr	r2, [pc, #388]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa6:	f023 020f 	bic.w	r2, r3, #15
 8000faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	495a      	ldr	r1, [pc, #360]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d054      	beq.n	8001076 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc80 	bl	80008d0 <HAL_GetTick>
 8000fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fc7b 	bl	80008d0 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	@ 0x64
 8000fe4:	d902      	bls.n	8000fec <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f000 bf19 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
 8000fec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001000:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b3f      	cmp	r3, #63	@ 0x3f
 800100c:	d802      	bhi.n	8001014 <HAL_RCC_OscConfig+0x204>
 800100e:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	e015      	b.n	8001040 <HAL_RCC_OscConfig+0x230>
 8001014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001018:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001028:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800102c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001030:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001040:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001044:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001048:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800104c:	fa92 f2a2 	rbit	r2, r2
 8001050:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001054:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001058:	fab2 f282 	clz	r2, r2
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f002 021f 	and.w	r2, r2, #31
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0b0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1c6>
 8001074:	e057      	b.n	8001126 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fc2b 	bl	80008d0 <HAL_GetTick>
 800107a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e00a      	b.n	8001096 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fc26 	bl	80008d0 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b64      	cmp	r3, #100	@ 0x64
 800108e:	d902      	bls.n	8001096 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	f000 bec4 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
 8001096:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80010aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b6:	d802      	bhi.n	80010be <HAL_RCC_OscConfig+0x2ae>
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	e015      	b.n	80010ea <HAL_RCC_OscConfig+0x2da>
 80010be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_RCC_OscConfig+0x310>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80010f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010f6:	fa92 f2a2 	rbit	r2, r2
 80010fa:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001102:	fab2 f282 	clz	r2, r2
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	f042 0220 	orr.w	r2, r2, #32
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	f002 021f 	and.w	r2, r2, #31
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f202 	lsl.w	r2, r1, r2
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1b0      	bne.n	8001080 <HAL_RCC_OscConfig+0x270>
 800111e:	e002      	b.n	8001126 <HAL_RCC_OscConfig+0x316>
 8001120:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 816c 	beq.w	8001414 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800113c:	4bcc      	ldr	r3, [pc, #816]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001148:	4bc9      	ldr	r3, [pc, #804]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d16d      	bne.n	8001230 <HAL_RCC_OscConfig+0x420>
 8001154:	4bc6      	ldr	r3, [pc, #792]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d167      	bne.n	8001230 <HAL_RCC_OscConfig+0x420>
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001172:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b3f      	cmp	r3, #63	@ 0x3f
 800117e:	d802      	bhi.n	8001186 <HAL_RCC_OscConfig+0x376>
 8001180:	4bbb      	ldr	r3, [pc, #748]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	e013      	b.n	80011ae <HAL_RCC_OscConfig+0x39e>
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800119e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80011aa:	4bb1      	ldr	r3, [pc, #708]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	2202      	movs	r2, #2
 80011b0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80011b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80011b8:	fa92 f2a2 	rbit	r2, r2
 80011bc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80011c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80011c4:	fab2 f282 	clz	r2, r2
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	f042 0220 	orr.w	r2, r2, #32
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	f002 021f 	and.w	r2, r2, #31
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00a      	beq.n	80011f6 <HAL_RCC_OscConfig+0x3e6>
 80011e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d002      	beq.n	80011f6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f000 be14 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	21f8      	movs	r1, #248	@ 0xf8
 800120c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001214:	fa91 f1a1 	rbit	r1, r1
 8001218:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800121c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001220:	fab1 f181 	clz	r1, r1
 8001224:	b2c9      	uxtb	r1, r1
 8001226:	408b      	lsls	r3, r1
 8001228:	4991      	ldr	r1, [pc, #580]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	e0f1      	b.n	8001414 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8083 	beq.w	8001348 <HAL_RCC_OscConfig+0x538>
 8001242:	2301      	movs	r3, #1
 8001244:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001254:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001262:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	461a      	mov	r2, r3
 800126a:	2301      	movs	r3, #1
 800126c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb2f 	bl	80008d0 <HAL_GetTick>
 8001272:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	e00a      	b.n	800128e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fb2a 	bl	80008d0 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d902      	bls.n	800128e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	f000 bdc8 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80012a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ac:	d802      	bhi.n	80012b4 <HAL_RCC_OscConfig+0x4a4>
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	e013      	b.n	80012dc <HAL_RCC_OscConfig+0x4cc>
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80012d8:	4b65      	ldr	r3, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	2202      	movs	r2, #2
 80012de:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80012e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012e6:	fa92 f2a2 	rbit	r2, r2
 80012ea:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80012ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80012f2:	fab2 f282 	clz	r2, r2
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f002 021f 	and.w	r2, r2, #31
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0b4      	beq.n	8001278 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b58      	ldr	r3, [pc, #352]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	21f8      	movs	r1, #248	@ 0xf8
 8001324:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800132c:	fa91 f1a1 	rbit	r1, r1
 8001330:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001334:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001338:	fab1 f181 	clz	r1, r1
 800133c:	b2c9      	uxtb	r1, r1
 800133e:	408b      	lsls	r3, r1
 8001340:	494b      	ldr	r1, [pc, #300]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
 8001346:	e065      	b.n	8001414 <HAL_RCC_OscConfig+0x604>
 8001348:	2301      	movs	r3, #1
 800134a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800135a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001368:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	461a      	mov	r2, r3
 8001370:	2300      	movs	r3, #0
 8001372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff faac 	bl	80008d0 <HAL_GetTick>
 8001378:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff faa7 	bl	80008d0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d902      	bls.n	8001394 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	f000 bd45 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80013a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b2:	d802      	bhi.n	80013ba <HAL_RCC_OscConfig+0x5aa>
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	e013      	b.n	80013e2 <HAL_RCC_OscConfig+0x5d2>
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <HAL_RCC_OscConfig+0x660>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	2202      	movs	r2, #2
 80013e4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013ec:	fa92 f2a2 	rbit	r2, r2
 80013f0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80013f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013f8:	fab2 f282 	clz	r2, r2
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	f002 021f 	and.w	r2, r2, #31
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1b4      	bne.n	800137e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001418:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8115 	beq.w	8001654 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d07e      	beq.n	8001538 <HAL_RCC_OscConfig+0x728>
 800143a:	2301      	movs	r3, #1
 800143c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800144c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_RCC_OscConfig+0x664>)
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	461a      	mov	r2, r3
 8001460:	2301      	movs	r3, #1
 8001462:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fa34 	bl	80008d0 <HAL_GetTick>
 8001468:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146c:	e00f      	b.n	800148e <HAL_RCC_OscConfig+0x67e>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fa2a 	bl	80008d0 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d902      	bls.n	800148e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	f000 bcc8 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014a8:	2202      	movs	r2, #2
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e8:	4bb0      	ldr	r3, [pc, #704]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 80014ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014f4:	2102      	movs	r1, #2
 80014f6:	6019      	str	r1, [r3, #0]
 80014f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fa93 f1a3 	rbit	r1, r3
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800150e:	6019      	str	r1, [r3, #0]
  return result;
 8001510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001514:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0a0      	beq.n	8001478 <HAL_RCC_OscConfig+0x668>
 8001536:	e08d      	b.n	8001654 <HAL_RCC_OscConfig+0x844>
 8001538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001548:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001556:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800155a:	601a      	str	r2, [r3, #0]
  return result;
 800155c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001560:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001564:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	4b90      	ldr	r3, [pc, #576]	@ (80017b0 <HAL_RCC_OscConfig+0x9a0>)
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	461a      	mov	r2, r3
 8001576:	2300      	movs	r3, #0
 8001578:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff f9a9 	bl	80008d0 <HAL_GetTick>
 800157e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff f9a4 	bl	80008d0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d902      	bls.n	800159a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	f000 bc42 	b.w	8001e1e <HAL_RCC_OscConfig+0x100e>
 800159a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015a2:	2202      	movs	r2, #2
 80015a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f2a3 	rbit	r2, r3
 80015b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015c6:	2202      	movs	r2, #2
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f2a3 	rbit	r2, r3
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fa93 f2a3 	rbit	r2, r3
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001604:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	4b69      	ldr	r3, [pc, #420]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800160a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001612:	2102      	movs	r1, #2
 8001614:	6019      	str	r1, [r3, #0]
 8001616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f1a3 	rbit	r1, r3
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800162c:	6019      	str	r1, [r3, #0]
  return result;
 800162e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001632:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d197      	bne.n	8001584 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 819e 	beq.w	80019a6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001670:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d116      	bne.n	80016aa <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	4b4b      	ldr	r3, [pc, #300]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	4a4a      	ldr	r2, [pc, #296]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001686:	61d3      	str	r3, [r2, #28]
 8001688:	4b48      	ldr	r3, [pc, #288]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001694:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80016a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b42      	ldr	r3, [pc, #264]	@ (80017b4 <HAL_RCC_OscConfig+0x9a4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11a      	bne.n	80016ec <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b3f      	ldr	r3, [pc, #252]	@ (80017b4 <HAL_RCC_OscConfig+0x9a4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a3e      	ldr	r2, [pc, #248]	@ (80017b4 <HAL_RCC_OscConfig+0x9a4>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff f905 	bl	80008d0 <HAL_GetTick>
 80016c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	e009      	b.n	80016e0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7ff f900 	bl	80008d0 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	@ 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e39e      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <HAL_RCC_OscConfig+0x9a4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ef      	beq.n	80016cc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x8fa>
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e035      	b.n	8001776 <HAL_RCC_OscConfig+0x966>
 800170a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x924>
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	e020      	b.n	8001776 <HAL_RCC_OscConfig+0x966>
 8001734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001738:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x94e>
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0x966>
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <HAL_RCC_OscConfig+0x99c>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff f8a2 	bl	80008d0 <HAL_GetTick>
 800178c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	e012      	b.n	80017b8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f89d 	bl	80008d0 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d908      	bls.n	80017b8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e339      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	10908120 	.word	0x10908120
 80017b4:	40007000 	.word	0x40007000
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	fa93 f2a3 	rbit	r2, r3
 80017f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017fe:	601a      	str	r2, [r3, #0]
  return result;
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001808:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0xa10>
 800181a:	4b98      	ldr	r3, [pc, #608]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	e013      	b.n	8001848 <HAL_RCC_OscConfig+0xa38>
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001828:	2202      	movs	r2, #2
 800182a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001830:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	fa93 f2a3 	rbit	r2, r3
 800183a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	4b8d      	ldr	r3, [pc, #564]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800184c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001850:	2102      	movs	r1, #2
 8001852:	6011      	str	r1, [r2, #0]
 8001854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001858:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	fa92 f1a2 	rbit	r1, r2
 8001862:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001866:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800186a:	6011      	str	r1, [r2, #0]
  return result;
 800186c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001870:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	fab2 f282 	clz	r2, r2
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f002 021f 	and.w	r2, r2, #31
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	f43f af7f 	beq.w	8001792 <HAL_RCC_OscConfig+0x982>
 8001894:	e07d      	b.n	8001992 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff f81b 	bl	80008d0 <HAL_GetTick>
 800189a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff f816 	bl	80008d0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e2b2      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
 80018b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018bc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018c0:	2202      	movs	r2, #2
 80018c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018fe:	601a      	str	r2, [r3, #0]
  return result;
 8001900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001904:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001908:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0xb10>
 800191a:	4b58      	ldr	r3, [pc, #352]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	e013      	b.n	8001948 <HAL_RCC_OscConfig+0xb38>
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001928:	2202      	movs	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001930:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	4b4d      	ldr	r3, [pc, #308]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800194c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001950:	2102      	movs	r1, #2
 8001952:	6011      	str	r1, [r2, #0]
 8001954:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001958:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	fa92 f1a2 	rbit	r1, r2
 8001962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001966:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800196a:	6011      	str	r1, [r2, #0]
  return result;
 800196c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001970:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	fab2 f282 	clz	r2, r2
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	f002 021f 	and.w	r2, r2, #31
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d186      	bne.n	80018a0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001992:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001996:	2b01      	cmp	r3, #1
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199a:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a37      	ldr	r2, [pc, #220]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 80019a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8232 	beq.w	8001e1c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b8:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	f000 8201 	beq.w	8001dc8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	f040 8157 	bne.w	8001c86 <HAL_RCC_OscConfig+0xe76>
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019fc:	601a      	str	r2, [r3, #0]
  return result;
 80019fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a02:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a06:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7fe ff57 	bl	80008d0 <HAL_GetTick>
 8001a22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	e009      	b.n	8001a3c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7fe ff52 	bl	80008d0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1f0      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
 8001a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a40:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a60:	601a      	str	r2, [r3, #0]
  return result;
 8001a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a66:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a74:	d804      	bhi.n	8001a80 <HAL_RCC_OscConfig+0xc70>
 8001a76:	4b01      	ldr	r3, [pc, #4]	@ (8001a7c <HAL_RCC_OscConfig+0xc6c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e029      	b.n	8001ad0 <HAL_RCC_OscConfig+0xcc0>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aaa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001aae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4bc3      	ldr	r3, [pc, #780]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ad8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fa92 f1a2 	rbit	r1, r2
 8001aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001af4:	6011      	str	r1, [r2, #0]
  return result;
 8001af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001afa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f042 0220 	orr.w	r2, r2, #32
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f002 021f 	and.w	r2, r2, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d185      	bne.n	8001a28 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4baf      	ldr	r3, [pc, #700]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	49a7      	ldr	r1, [pc, #668]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b68:	601a      	str	r2, [r3, #0]
  return result;
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b72:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	461a      	mov	r2, r3
 8001b86:	2301      	movs	r3, #1
 8001b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7fe fea1 	bl	80008d0 <HAL_GetTick>
 8001b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b92:	e009      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe fe9c 	bl	80008d0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e13a      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bcc:	601a      	str	r2, [r3, #0]
  return result;
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b3f      	cmp	r3, #63	@ 0x3f
 8001be0:	d802      	bhi.n	8001be8 <HAL_RCC_OscConfig+0xdd8>
 8001be2:	4b7e      	ldr	r3, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e027      	b.n	8001c38 <HAL_RCC_OscConfig+0xe28>
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c44:	6011      	str	r1, [r2, #0]
 8001c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	fa92 f1a2 	rbit	r1, r2
 8001c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c5c:	6011      	str	r1, [r2, #0]
  return result;
 8001c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d087      	beq.n	8001b94 <HAL_RCC_OscConfig+0xd84>
 8001c84:	e0ca      	b.n	8001e1c <HAL_RCC_OscConfig+0x100c>
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001caa:	601a      	str	r2, [r3, #0]
  return result;
 8001cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fe00 	bl	80008d0 <HAL_GetTick>
 8001cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fdfb 	bl	80008d0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e099      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d0e:	601a      	str	r2, [r3, #0]
  return result;
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d22:	d802      	bhi.n	8001d2a <HAL_RCC_OscConfig+0xf1a>
 8001d24:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e027      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6a>
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_OscConfig+0xfcc>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d7e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d82:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d86:	6011      	str	r1, [r2, #0]
 8001d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d8c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fa92 f1a2 	rbit	r1, r2
 8001d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d9a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d9e:	6011      	str	r1, [r2, #0]
  return result;
 8001da0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001da4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d187      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xec6>
 8001dc6:	e029      	b.n	8001e1c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d103      	bne.n	8001de0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e020      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
 8001ddc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_RCC_OscConfig+0x1018>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001de8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e04:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09e      	sub	sp, #120	@ 0x78
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e154      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b89      	ldr	r3, [pc, #548]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b86      	ldr	r3, [pc, #536]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4984      	ldr	r1, [pc, #528]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b82      	ldr	r3, [pc, #520]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e13c      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b7b      	ldr	r3, [pc, #492]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4978      	ldr	r1, [pc, #480]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80cd 	beq.w	800203a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d137      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xec>
 8001ea8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_RCC_ClockConfig+0x9c>
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xbc>
 8001ec8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ed6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8001edc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ee4:	4b62      	ldr	r3, [pc, #392]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ef6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d171      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0ea      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d137      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x164>
 8001f20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f24:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f38:	d802      	bhi.n	8001f40 <HAL_RCC_ClockConfig+0x114>
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_ClockConfig+0x134>
 8001f40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5c:	4b44      	ldr	r3, [pc, #272]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f64:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d135      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0ae      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
 8001f90:	2302      	movs	r3, #2
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fa6:	d802      	bhi.n	8001fae <HAL_RCC_ClockConfig+0x182>
 8001fa8:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e00d      	b.n	8001fca <HAL_RCC_ClockConfig+0x19e>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fba:	2302      	movs	r3, #2
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	2202      	movs	r2, #2
 8001fcc:	61ba      	str	r2, [r7, #24]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	fa92 f2a2 	rbit	r2, r2
 8001fd4:	617a      	str	r2, [r7, #20]
  return result;
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	fab2 f282 	clz	r2, r2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f042 0220 	orr.w	r2, r2, #32
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f002 021f 	and.w	r2, r2, #31
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e07a      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 0203 	bic.w	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	491a      	ldr	r1, [pc, #104]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200a:	f7fe fc61 	bl	80008d0 <HAL_GetTick>
 800200e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002010:	e00a      	b.n	8002028 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002012:	f7fe fc5d 	bl	80008d0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e062      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_RCC_ClockConfig+0x244>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 020c 	and.w	r2, r3, #12
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	429a      	cmp	r2, r3
 8002038:	d1eb      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d215      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 0207 	bic.w	r2, r3, #7
 8002050:	4906      	ldr	r1, [pc, #24]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <HAL_RCC_ClockConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d006      	beq.n	8002074 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e041      	b.n	80020ee <HAL_RCC_ClockConfig+0x2c2>
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <HAL_RCC_ClockConfig+0x2cc>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	491a      	ldr	r1, [pc, #104]	@ (80020f8 <HAL_RCC_ClockConfig+0x2cc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_RCC_ClockConfig+0x2cc>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4912      	ldr	r1, [pc, #72]	@ (80020f8 <HAL_RCC_ClockConfig+0x2cc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b2:	f000 f829 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <HAL_RCC_ClockConfig+0x2cc>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c0:	22f0      	movs	r2, #240	@ 0xf0
 80020c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	60fa      	str	r2, [r7, #12]
  return result;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	40d3      	lsrs	r3, r2
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x2d0>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	fa21 f303 	lsr.w	r3, r1, r3
 80020de:	4a08      	ldr	r2, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x2d4>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020e2:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <HAL_RCC_ClockConfig+0x2d8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fbae 	bl	8000848 <HAL_InitTick>
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3778      	adds	r7, #120	@ 0x78
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08002220 	.word	0x08002220
 8002100:	2000001c 	.word	0x2000001c
 8002104:	20000020 	.word	0x20000020

08002108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_RCC_GetSysClockFreq+0x94>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d002      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x30>
 8002132:	2b08      	cmp	r3, #8
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x36>
 8002136:	e026      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800213a:	613b      	str	r3, [r7, #16]
      break;
 800213c:	e026      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	4a17      	ldr	r2, [pc, #92]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800214c:	4b13      	ldr	r3, [pc, #76]	@ (800219c <HAL_RCC_GetSysClockFreq+0x94>)
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002164:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	fbb2 f2f3 	udiv	r2, r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e004      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002188:	613b      	str	r3, [r7, #16]
      break;
 800218a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218c:	693b      	ldr	r3, [r7, #16]
}
 800218e:	4618      	mov	r0, r3
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	08002230 	.word	0x08002230
 80021a8:	08002240 	.word	0x08002240
 80021ac:	003d0900 	.word	0x003d0900

080021b0 <memset>:
 80021b0:	4402      	add	r2, r0
 80021b2:	4603      	mov	r3, r0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d100      	bne.n	80021ba <memset+0xa>
 80021b8:	4770      	bx	lr
 80021ba:	f803 1b01 	strb.w	r1, [r3], #1
 80021be:	e7f9      	b.n	80021b4 <memset+0x4>

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	4d0d      	ldr	r5, [pc, #52]	@ (80021f8 <__libc_init_array+0x38>)
 80021c4:	4c0d      	ldr	r4, [pc, #52]	@ (80021fc <__libc_init_array+0x3c>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	2600      	movs	r6, #0
 80021cc:	42a6      	cmp	r6, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002200 <__libc_init_array+0x40>)
 80021d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002204 <__libc_init_array+0x44>)
 80021d4:	f000 f818 	bl	8002208 <_init>
 80021d8:	1b64      	subs	r4, r4, r5
 80021da:	10a4      	asrs	r4, r4, #2
 80021dc:	2600      	movs	r6, #0
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e8:	4798      	blx	r3
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f2:	4798      	blx	r3
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	08002250 	.word	0x08002250
 80021fc:	08002250 	.word	0x08002250
 8002200:	08002250 	.word	0x08002250
 8002204:	08002254 	.word	0x08002254

08002208 <_init>:
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	bf00      	nop
 800220c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220e:	bc08      	pop	{r3}
 8002210:	469e      	mov	lr, r3
 8002212:	4770      	bx	lr

08002214 <_fini>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	bf00      	nop
 8002218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221a:	bc08      	pop	{r3}
 800221c:	469e      	mov	lr, r3
 800221e:	4770      	bx	lr
